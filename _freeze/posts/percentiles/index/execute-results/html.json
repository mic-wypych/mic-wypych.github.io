{
  "hash": "fbd7080ba3b2f2ef6732ecf4737584e9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"A few remarks on percentile scales\"\nauthor: \"Micha≈Ç Wypych\"\ncategories: [statistics, simulation]\nimage: \"image.png\"\n---\n\n\n\n\n\nSo this post was born out of annoyance with dealing with percentile grids for baby weights and how easily they are misunderstood. What I want to show are some more or less unintuitive features of percentiles scales especially having to do with how the distribution for percentiles looks like and how spacing between percentiles affects potential variability (e.g. in change) depending on where we are on the percentile scale.\n\nBelow is the setup chunk with some functions for plots and loaded packages\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"setup\"}\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(showtext)\nlibrary(patchwork)\n\nfont_add_google(\"Lato\")\nfont_add_google(\"Ubuntu\")\nshowtext_auto()\n\n\ncol_main <- c(\"darkred\", \"firebrick3\", \"coral1\", \"salmon\",\"rosybrown3\",\"palevioletred1\", \"plum4\",\"slateblue4\", \"purple2\",\"springgreen2\", \"seagreen\",\"skyblue\", \"turquoise4\", \"steelblue4\", \"royalblue3\", \"navyblue\" )\n\n\n\nmy_theme <- function() {\n  #requires Lato and Ubuntu fonts\n  theme_minimal(base_family = \"Lato\", base_size = 20) +\n    theme(panel.grid.minor = element_blank(),\n          plot.background = element_rect(fill = \"white\", color = NA),\n          plot.title = element_text(face = \"bold\", size = 30, family = \"Ubuntu\"),\n          plot.subtitle = element_text(size = 20),\n          axis.title = element_text(face = \"bold\"),\n          strip.text = element_text(face = \"bold\"),\n          strip.background = element_rect(fill = \"grey80\", color = NA),\n          legend.title = element_text(face = \"bold\"),\n          plot.title.position = \"plot\")\n}\n```\n:::\n\n\n\n\n\nFirst lets generate some data from a normal distribution and set the random seed.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' lets start with some simulation\nset.seed(44)\nN <- 1e4\nx <- rnorm(N)\n\nx_perc <- ntile(x, 100)\n```\n:::\n\n\n\n\n\n## looking at marginal distributions\n\nLets start by looking at simple distributions. This one should be fairly obvious but I feel like it still gets forgotten way to often. How does a distribution of percentiles look like? Lets start with raw x and how it looks like:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"raw normal histogram\"}\nggplot(data.frame(x), aes(x =x )) +\n  geom_histogram(fill = col_main[13]) +\n  labs(title = \"distribution of raw values\") +\n  my_theme()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\nNice and friendly normal distribution. So how does a percentile distribution look like?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"percentile normal histogram\"}\nggplot(data.frame(x_perc), aes(x =x_perc )) +\n  geom_histogram(bins = 100, fill = col_main[13]) +\n  labs(title = \"distribution of percentiles\") +\n  my_theme()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\nIt's perfectly flat! Percentiles will always look like this because, well... by definition they are percentages so the same number of observations into each percentile. We can change the original distribution but it won't affect the percentile much. We can see it e.g. with exponential distribution:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Exponential histograms\"}\nx_exp <- rexp(N, 3)\nx_exp_perc <- ntile(x_exp, 100)\n\nexp_raw <- ggplot(data.frame(x_exp), aes(x =x_exp)) +\n  geom_histogram(fill = col_main[13]) +\n  labs(title = \"distribution of raw values\") +\n  my_theme()\n\nexp_perc <- ggplot(data.frame(x_exp_perc), aes(x =x_exp_perc)) +\n  geom_histogram(bins = 100, fill = col_main[13]) +\n  labs(title = \"distribution of percentiles\") +\n  my_theme()\n\nexp_raw + exp_perc\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\nThis can get annoying sometimes e.g. when doctors act as if no one should be on the lowest percentiles (me and many of my friends have heard that plenty of times). Well, someone has to be on the lowest percentiles, that's how percentiles work! And just as many people will be in the 1st percentile as there will be in the 50th percentile. This can be understandable from the perspective of individuals (no one wants to be the one having to deal with e.g. with kids with weight from the 1st percentile) but makes no sense once you look from a broader perspective.\n\n## Spacing between percentiles\n\nOne thing that is often forgotten about the percentile scales is that there can be different spacings between various percentiles. Lets calculate the values for percentiles and then get differences between subsequent percentiles to look at this:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"spacing\"}\nx_percentiles <- quantile(x, probs = seq(.01, 1, .01))\n\nx_df <- data.frame(x_percentiles) %>%\n  mutate(perc_lag = lag(x_percentiles),\n         difference_1 = x_percentiles - perc_lag)\n\nx_df %>%\n  drop_na() %>%\n  ggplot(aes(x = 2:100, y = difference_1)) +\n  geom_point(color = col_main[13]) +\n  labs(x = NULL, y = \"difference\") +\n  my_theme()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\nYou can see that the differences are quite large for the first few and last few percentiles and are pretty small for the rest. This is exactly what we would expect with a gaussian distribution of raw values.\n\nLets try to overlay the percentiles on the gaussian distribution we drew our data from\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"percentile spacing\"}\nas.data.frame(x) |>\n  ggplot(aes(x)) +\n  geom_density(color = col_main[13], linewidth = 2) +\n  geom_vline(data = x_df, aes(xintercept = x_percentiles), color = col_main[15]) +\n  labs(title = \"Spacing of percentiles\", subtitle = \"Original distribution (thick blue line) has percentiles\\noverlayed as vertical lines (dark blue)\") +\n  my_theme()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\nYou can see how much of the distribution falls into 1st, 2nd or 99th percentile and how little falls into a single percentile in the middle of the distribution. It's actually fairly intuitive why this happens. The same number of people have to fall into each percentile and if there are few people at the tails of the distribution then we need to widen the range of the percentiles there to get enough people. The opposite is true for the peak of the distribution. There are a lot of people there so a slim sliver of the distribution is enough to get quite a few people into the percentile. Note that the 100th percentile is so far away because the `quantile` function records the higher boundary of the percentile rather than the middle so it has to end at the very far end of the distribution.\n\nOne very important consequence of this is that percentiles are pretty much ranks (see [here](https://www.jstor.org/stable/pdf/27524716.pdf) for an good old text on the matter) and should be treated more as ordinal than interval scales which can be a bit unintuitive at first (see [here](https://files.eric.ed.gov/fulltext/ED363637.pdf) for the perils of forgetting about that).\n\nThis also means that if some value increases over time from a very low percentile with a steady pace then we might expect first slow increases in percentiles, then rapid increases around the middle of the distribution and again slower increases as we are reaching the top. Lets try simulating that:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"1st simulation\"}\nx_init <- min(x) #start with the lowest value in our distribution\nperc_progress <- c() #create a vector to store percentiles\nfor(i in 1:1000) { # max of 1000 steps\n  x_init <- x_init + .1 #increase our value by .1\n  perc_value <- min(x_percentiles[which(x_percentiles > x_init)]) # get the percentile value\n  percentile <- names(x_percentiles[which(x_percentiles == perc_value)]) # get the percentile name\n  perc_progress <- c(perc_progress, percentile) # we want to stop if we get too close to max value and there are still iterations left (otherwise the min() function breaks)\n  if (x_init >=(max(x) - .1)) {\n    break\n  }\n}\n\nperc_progress<- as.numeric(str_extract(perc_progress, \"[0-9]+\"))\n\ndata.frame(perc_progress) %>%\n  ggplot(aes(x = 1:length(perc_progress), y = perc_progress)) +\n  geom_line(color = col_main[12], linewidth = 2) +\n  labs(x = \"iteration\", y = \"percentile\") +\n  my_theme()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\nExactly what we would expect! First the change in percentiles is slow, then it speeds up and slows down in the right half of the plot. It takes us a long time to get out of the lowest percentiles but once we do we quickly get to the 50th and start changing more slowly form there on.\n\n### variability in percentiles\n\nOne significant consequence of how differences between subsequent percentiles vary is how much variability in percentiles can we expect with the same amount of variability on the original scale depending on where we start.\n\nThis is a common thing when infants gain weight. They might be gaining weight by some amount plus some random variations (lots of reasons here - some things in the diet, baby pooped/peed before being weighed etc.). In low or high percentiles we might expect this random variation in how much they gain weight to matter little. However in the middle it will make the variation in percentiles seem bigger. Again lets simulate some random variation around our distribution of x with 3 starting places: low (5th), middle (50th) and high percentile (95th). We will run 100 simulations for each starting place and each simulation has 500 iterations.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"2nd simulation\"}\nsimulate_variability <- function(init_perc, sd_change, n_iter = 500) {\n  x_init <- x_percentiles[init_perc] #start with the lowest value in our distribution\nperc_progress <- c() #create a vector to store percentiles\nfor(i in 1:n_iter) { # max of 1000 steps\n  x_init <- x_init + rnorm(1, mean = 0, sd = sd_change) #increase our value by .1\n  perc_value <- min(x_percentiles[which(x_percentiles > x_init)]) # get the percentile value\n  percentile <- names(x_percentiles[which(x_percentiles == perc_value)]) # get the percentile name\n  perc_progress <- c(perc_progress, percentile) # we want to stop if we get too close to max value and there are still iterations left (otherwise the min() function breaks)\n  if (x_init >=(max(x) - .1) | x_init <= (min(x) + .1)) {\n    break\n  }\n}\n  perc_progress<- as.numeric(str_extract(perc_progress, \"[0-9]+\"))\n  return(perc_progress)\n}\n\n\n\nsimulate_growth <- function(perc, n_iter = 500, n_runs = 100) {\n  df <- data.frame()\n  for(i in 1:n_runs) {\n    prog<- simulate_variability(perc, .02, n_iter)\n    df <- rbind(df, prog)\n  }\n  colnames(df) <- 1:n_iter\n  df$run <- 1:n_runs\n  \n  df_long <- df %>%\n    pivot_longer(-c(run), names_to = \"iter\", values_to = \"percentile\") %>%\n    mutate(condition = as.character(perc),\n           iter = as.numeric(iter))\n}\n\n\ndf_l <- simulate_growth(5)\ndf_m <- simulate_growth(50)\ndf_h <- simulate_growth(95)\n\ndf_joined <- bind_rows(df_l, df_m, df_h)\n\ndf_joined %>%\n  ggplot(aes(x = as.numeric(iter), y = percentile, group = as.factor(run))) +\n  geom_line(alpha = .4, color = col_main[13]) +\n  facet_wrap(~condition) +\n  labs(title = \"Simulating variability in 5th, 50th and 95th percentile\",\n       x = \"iteration\") +\n  my_theme()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n\nYou can see a lot more variability in the middle panel than in the left or right ones even though the changes on the original scale come from the same distribution. We can also get the average range (difference between highest and lowest percentile on a given run):\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"mean range of percentiles\"}\ndf_joined %>%\n  group_by(condition, run) %>%\n  summarise(range = max(percentile) - min(percentile)) %>%\n  summarise(mean_range = mean(range)) %>%\n  gt::gt()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"vzvgnplayc\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#vzvgnplayc table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#vzvgnplayc thead, #vzvgnplayc tbody, #vzvgnplayc tfoot, #vzvgnplayc tr, #vzvgnplayc td, #vzvgnplayc th {\n  border-style: none;\n}\n\n#vzvgnplayc p {\n  margin: 0;\n  padding: 0;\n}\n\n#vzvgnplayc .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#vzvgnplayc .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#vzvgnplayc .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#vzvgnplayc .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#vzvgnplayc .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#vzvgnplayc .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vzvgnplayc .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#vzvgnplayc .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#vzvgnplayc .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#vzvgnplayc .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#vzvgnplayc .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#vzvgnplayc .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#vzvgnplayc .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#vzvgnplayc .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#vzvgnplayc .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#vzvgnplayc .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#vzvgnplayc .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#vzvgnplayc .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#vzvgnplayc .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vzvgnplayc .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#vzvgnplayc .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#vzvgnplayc .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#vzvgnplayc .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vzvgnplayc .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#vzvgnplayc .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#vzvgnplayc .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vzvgnplayc .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vzvgnplayc .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#vzvgnplayc .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vzvgnplayc .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#vzvgnplayc .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vzvgnplayc .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#vzvgnplayc .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vzvgnplayc .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#vzvgnplayc .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vzvgnplayc .gt_left {\n  text-align: left;\n}\n\n#vzvgnplayc .gt_center {\n  text-align: center;\n}\n\n#vzvgnplayc .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#vzvgnplayc .gt_font_normal {\n  font-weight: normal;\n}\n\n#vzvgnplayc .gt_font_bold {\n  font-weight: bold;\n}\n\n#vzvgnplayc .gt_font_italic {\n  font-style: italic;\n}\n\n#vzvgnplayc .gt_super {\n  font-size: 65%;\n}\n\n#vzvgnplayc .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#vzvgnplayc .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#vzvgnplayc .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#vzvgnplayc .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#vzvgnplayc .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#vzvgnplayc .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#vzvgnplayc .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#vzvgnplayc .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#vzvgnplayc div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"condition\">condition</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"mean_range\">mean_range</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"condition\" class=\"gt_row gt_right\">5</td>\n<td headers=\"mean_range\" class=\"gt_row gt_right\">6.64</td></tr>\n    <tr><td headers=\"condition\" class=\"gt_row gt_right\">50</td>\n<td headers=\"mean_range\" class=\"gt_row gt_right\">25.13</td></tr>\n    <tr><td headers=\"condition\" class=\"gt_row gt_right\">95</td>\n<td headers=\"mean_range\" class=\"gt_row gt_right\">6.40</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n\nIn the above simulation we were in fact not creating any growth, just random variation from the original value (in order to simulate that we would need percentiles for each iteration) but assuming no strange growths that would not change the results a lot (rather than drawing a number from a distribution with mean 0 we would make the mean higher than 0 and still our expectation would be that a person in 50th percentile in time 1 should be on average in 50th percentile in time 2).\n\nThis means that when looking at percentiles e.g. weight gains of babies in low or high percentiles might seem much more stable than of those from the mid percentiles even if in fact they are very similar weight gains.\n\n### Simulating from real data\n\nSome data on percentiles of baby weights are actually available online. This means we could check our simulation above with some real data that we can use as a basis for simulating growth. What we will do is:\n\n1.  get the data that stores a number of percentiles of baby weight at months 0 to 24.\n2.  get approximations of growth at various percentiles (5th, 50th and 95th)\n3.  Get full percentile tables for each timepoint\n4.  Simulate growth at those percentiles to see variability\n\nBelow is a plot of percentiles for male baby weights from birth to 24 months taken from [CDC](https://www.cdc.gov/growthcharts/html_charts/wtageinf.htm):\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"cdc data\"}\nbaby_w <- read_delim(\"baby_weight.tsv\")\ncolnames(baby_w) <- trimws(colnames(baby_w))\nbaby_w <- baby_w %>%\n  mutate(across(.cols = '3rd':'95th', as.numeric),\n         `months` = as.numeric(`months`))\n\n\nbaby_w %>%\n  pivot_longer(cols = '3rd':'97th', values_to = \"weight\", names_to = \"percentile\") %>%\n  mutate(percentile = factor(percentile, ordered = TRUE,\n                             levels = c(\"3rd\", \"5th\", \"10th\", \"25th\",\n                                        \"50th\", \"75th\", \"90th\", \"95th\", \"97th\"))) %>%\n  ggplot(aes(x = months, y = weight, color = percentile, group = percentile)) +\n  geom_line(linewidth = 1.5) +\n  scale_color_manual(values = col_main[1:9]) +\n  labs(title = \"Weight percentiles for babies\\n0-24 months old\",\n       subtitle = \"Data from CDC\") +\n  my_theme()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n\nLets try to simulate that. We won't go to any modelling really but rather use `approxfun()` to get an approximation of the growth function at a given percentile. Below is the code to get approximation for the 50th percentile. We will do the same at 5th and 95th\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"approximating growth\"}\n#growth function at 50th\n#get months and weights at 5th, 50th and 95th percentile\nx <- baby_w$months\nweight_50 <- baby_w$`50th`\nweight_5 <- baby_w$`5th`\nweight_95 <- baby_w$`95th`\n#make the approximation function\n\nfun_5 <- approxfun(x = x, y = weight_5)\nfun_50 <- approxfun(x = x, y = weight_50)\nfun_95 <- approxfun(x = x, y = weight_95)\n```\n:::\n\n\n\n\n\nWe can run a simple simulation to get some idea if they work ok. We will simulate growth based on our function plus a little random noise. We'll check the 50th percentile function for brevity:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"50th percentile check\"}\ndf_50 <- data.frame()\nfor (i in 1:50) {\n  x_1 <- fun_50(0)\n  x_1_results <- c(x_1)\n  for (i in (1:25)) {\n  x_1 <- x_1 + fun_50(x[i+1]) - fun_50(x[i]) + rnorm(1, 0, .05)\n  x_1_results <- c(x_1_results, x_1)\n  }\n  df_50 <- rbind(df_50, x_1_results)\n}\ncolnames(df_50) <- x\n\ndf_50 %>%\n  mutate(run = 1:50) %>%\n  pivot_longer(-c(run), names_to = \"month\", values_to = \"weight\") %>%\n  mutate(month = as.numeric(month)) %>%\n  ggplot(aes(x = month, y = weight, group = run)) +\n  geom_line(alpha = .3, color = col_main[12]) +\n  geom_line(data = baby_w, aes(x = months, y = `50th`), color = col_main[14], linewidth = 1, inherit.aes = FALSE) +\n  labs(title = \"Simulating data for 50th percentile\",\n       subtitle = \"dark blue = actual data, light blue = simulated data\") +\n  my_theme()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n\nLooks pretty good! Now we will need full percentile tables since the cdc data provides only a handful of percentiles. I did that using an approximation for normal distributions.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"full percentile grid\"}\nget_mean_sd <- function(perc_50, perc_75) {\n  m <- perc_50\n  sd <- (perc_75 - perc_50) / 0.6744898\n  result <- c(m, sd)\n  return(result)\n}\n\nget_percentiles <- function(time) {\n  perc_50 <- as.vector(baby_w[time,6])\n  perc_75 <- as.vector(baby_w[time,7])\n  msd_01 <- as.vector(get_mean_sd(perc_50[[1]], perc_75[[1]]))\n\n\ns <- rnorm(1e4, msd_01[1], msd_01[2])\n\npercentiles <- quantile(s, seq(.01,1, .01))\nreturn(percentiles)\n}\n\npercentiles_df <- data.frame(a = 1:100)\n\nfor(i in 1:26) {\n  p <- get_percentiles(i)\n  percentiles_df[,i] <- p\n}\ncnames <- paste0(\"p_\", 1:26)\ncolnames(percentiles_df) <- cnames\npercentiles_df$percentile <- 1:100\n#the dataframe above has percentiles for each .5 month separately\n```\n:::\n\n\n\n\n\nNow we can simulate baby growth and check against the percentile tables to see if for middle percentiles growth we will see more variability in percentiles. We will also store the raw weights so that we can look at it as well.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"cdc simulation\"}\n#simulating the growth\n\nsimulate_from_cdc <- function(fun, n_iter = 50, variability = .05) {\n  f <- get(fun)\n  df_perc <- data.frame()\n  df_raw <- data.frame()\n  perc_origin <- as.numeric(str_extract(fun, \"[0-9]+\"))\n  for (i in 1:n_iter) {\n    init <- f(x[1])\n    raw <- c(init)\n    results <- c(perc_origin) #need to extract the percentile from the function name the percentile \n    for(i in 1:25) {\n      init <- init + f(x[i+1]) - f(x[i]) + rnorm(1, 0, variability)\n      perc_value <- min(percentiles_df[which(percentiles_df[,i+1] > init), i+1]) # get the percentile value\n      perc <- percentiles_df[which(percentiles_df[,i +1 ] == perc_value), \"percentile\"] # get the percentile name\n      results <- c(results, perc)\n      raw <- c(raw, init)\n    }\n    df_perc <- rbind(df_perc, results)\n    df_raw <- rbind(df_raw, raw)\n  }\n  \n  \n  colnames(df_perc) <- x\n  df_perc$run <- 1:n_iter\n  \n  df_perc_long <- df_perc %>%\n    pivot_longer(-c(run), names_to = \"month\", values_to = \"percentile\") %>%\n    mutate(month = as.numeric(month),\n           condition = perc_origin) \n  \n  colnames(df_raw) <- x\n  df_raw$run <- 1:n_iter\n  \n  df_raw_long <- df_raw %>%\n    pivot_longer(-c(run), names_to = \"month\", values_to = \"weight\") %>%\n    mutate(month = as.numeric(month),\n           condition = perc_origin)\n  df_perc_long$weight <- df_raw_long$weight\n  return(df_perc_long)\n}\n\ndf_cdc_l <- simulate_from_cdc(\"fun_5\")\ndf_cdc_m <- simulate_from_cdc(\"fun_50\")\ndf_cdc_h <- simulate_from_cdc(\"fun_95\")\n\ndf_cdc_joined <- bind_rows(df_cdc_l, df_cdc_m, df_cdc_h)\n\ndf_cdc_joined %>%\n  ggplot(aes(x = month, y = percentile, group = run)) +\n  geom_line(alpha = .3, color = col_main[16]) +\n  facet_wrap(~condition) +\n  labs(title = \"Simulating growth in percentiles\") +\n  my_theme()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\nWe got very similar results to our earlier simulation! Middle panel show much larger variability in percentiles compared to the left and right ones. We can also get the average range in percentiles.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"mean ranges from cdc sim\"}\ndf_cdc_joined %>%\n  group_by(condition, run) %>%\n  summarise(range = max(percentile) - min(percentile)) %>%\n  summarise(mean_range = mean(range)) %>%\n  gt::gt()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"djxsihgdzi\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#djxsihgdzi table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#djxsihgdzi thead, #djxsihgdzi tbody, #djxsihgdzi tfoot, #djxsihgdzi tr, #djxsihgdzi td, #djxsihgdzi th {\n  border-style: none;\n}\n\n#djxsihgdzi p {\n  margin: 0;\n  padding: 0;\n}\n\n#djxsihgdzi .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#djxsihgdzi .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#djxsihgdzi .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#djxsihgdzi .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#djxsihgdzi .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#djxsihgdzi .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#djxsihgdzi .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#djxsihgdzi .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#djxsihgdzi .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#djxsihgdzi .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#djxsihgdzi .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#djxsihgdzi .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#djxsihgdzi .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#djxsihgdzi .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#djxsihgdzi .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#djxsihgdzi .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#djxsihgdzi .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#djxsihgdzi .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#djxsihgdzi .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#djxsihgdzi .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#djxsihgdzi .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#djxsihgdzi .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#djxsihgdzi .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#djxsihgdzi .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#djxsihgdzi .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#djxsihgdzi .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#djxsihgdzi .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#djxsihgdzi .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#djxsihgdzi .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#djxsihgdzi .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#djxsihgdzi .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#djxsihgdzi .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#djxsihgdzi .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#djxsihgdzi .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#djxsihgdzi .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#djxsihgdzi .gt_left {\n  text-align: left;\n}\n\n#djxsihgdzi .gt_center {\n  text-align: center;\n}\n\n#djxsihgdzi .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#djxsihgdzi .gt_font_normal {\n  font-weight: normal;\n}\n\n#djxsihgdzi .gt_font_bold {\n  font-weight: bold;\n}\n\n#djxsihgdzi .gt_font_italic {\n  font-style: italic;\n}\n\n#djxsihgdzi .gt_super {\n  font-size: 65%;\n}\n\n#djxsihgdzi .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#djxsihgdzi .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#djxsihgdzi .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#djxsihgdzi .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#djxsihgdzi .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#djxsihgdzi .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#djxsihgdzi .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#djxsihgdzi .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#djxsihgdzi div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"condition\">condition</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"mean_range\">mean_range</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"condition\" class=\"gt_row gt_right\">5</td>\n<td headers=\"mean_range\" class=\"gt_row gt_right\">5.76</td></tr>\n    <tr><td headers=\"condition\" class=\"gt_row gt_right\">50</td>\n<td headers=\"mean_range\" class=\"gt_row gt_right\">11.94</td></tr>\n    <tr><td headers=\"condition\" class=\"gt_row gt_right\">95</td>\n<td headers=\"mean_range\" class=\"gt_row gt_right\">3.04</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n\nWe could compare this against actual growth in weight to see if there is more variability in 50th percentile (there should not be much):\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"comparing raw growth\"}\ndf_cdc_joined %>%\n  ggplot(aes(x = month, y = weight, group = run)) +\n  geom_line(alpha = .3, color = col_main[16]) +\n  facet_wrap(~condition) +\n  labs(title = \"raw weight growth in 5th, 50th and 95th percentile\") +\n  my_theme()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n\nIt does not seem like there is more variability in growth in the middle category when we look at .\n\n### some caveats and what is the point\n\nAll of the above of course depends not just on the data that we got from cdc but also on our assumed model of growth which is probably pretty simplistic. Can we assume constant random variability across percentiles and in time? I think the first one is easier but I don't think it would undermine the point a lot if variability in time changed as long as it was the same across all percentiles.\n\nA more important point that is the drive home message is that you can't forget about the original distribution of raw values when working with percentiles. If in the simulations above we were working with a different distribution then the variability in percentiles would look different. For example for a bimodal distribution we would see the exact opposite from what happens with a normal distribution - the greater variability would be at lowest and highest percentiles.\n\nMaybe if I have the time and some data I will try to make some longitudinal ordinal models (like a Markov model or some multilevel ordinal maybe) to expand on this (something like described by Frank Harrell [here](https://www.fharrell.com/talk/cmstat/)).\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}