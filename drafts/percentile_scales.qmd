---
title: "A few remarks on percentile scales"
author: "Micha≈Ç Wypych"
---

So this

What to show in the post:

-   how marginal distribution with percentiles looks like - its uniform!

-   How changing the original distribution changes the percentile distribution

-   How spacing between percentiles looks like for a gaussian original distribution - more packed around 50th percentile

-   How much variability in time might we expect around the center and tails due to the above

-   How correlations with percentile scales might look like

Below is the setup chunk with some functions for plots and loaded packages

```{r}
library(ggplot2)
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
library(showtext)

font_add_google("Lato")
font_add_google("Ubuntu")
showtext_auto()


col_main <- c("darkred", "firebrick3", "coral1", "salmon","rosybrown3","palevioletred1", "plum4", "purple2","springgreen2", "seagreen","skyblue", "turquoise4", "steelblue4", "royalblue3", "slateblue4", "navyblue" )



my_theme <- function() {
  #requires Lato and Ubuntu fonts
  theme_minimal(base_family = "Lato", base_size = 20) +
    theme(panel.grid.minor = element_blank(),
          plot.background = element_rect(fill = "white", color = NA),
          plot.title = element_text(face = "bold", size = 30, family = "Ubuntu"),
          plot.subtitle = element_text(size = 20),
          axis.title = element_text(face = "bold"),
          strip.text = element_text(face = "bold"),
          strip.background = element_rect(fill = "grey80", color = NA),
          legend.title = element_text(face = "bold"),
          plot.title.position = "plot")
}
```

First lets get some data in.

```{r}
#' lets start with some simulation

N <- 1e4
x <- rnorm(N)

x_perc <- ntile(x, 100)
```

## looking at marginal distributions

### changing original distribution

## Spacing between percentiles

One thing that is often forgotten about the percentile scales is that there can be different spacings between various percentiles. Lets calculate the values for percentiles and then get differences between subsequent percentiles to look at this:

```{r}
x_percentiles <- quantile(x, probs = seq(.01, 1, .01))

x_df <- data.frame(x_percentiles) %>%
  mutate(perc_lag = lag(x_percentiles),
         difference_1 = x_percentiles - perc_lag)

x_df %>%
  drop_na() %>%
  ggplot(aes(x = 2:100, y = difference_1)) +
  geom_point(color = col_main[12]) +
  labs(x = NULL, y = "difference") +
  my_theme()
```

You can see that the differences are quite large for the first few and last few percentiles and are pretty small for the rest. This is exactly what we would expect with a gaussian original distribution

Lets try to overlay the percentiles on the gaussian distribution we drew our data from

```{r}
as.data.frame(x) |>
  ggplot(aes(x)) +
  geom_density(color = col_main[13], linewidth = 2) +
  geom_vline(data = x_df, aes(xintercept = x_percentiles), color = col_main[12]) +
  labs(title = "Spacing of percentiles", subtitle = "Original distribution (thick red line) has percentiles\noverlayed as vertical lines (pink)") +
  my_theme()
```

You can see how much of the distribution falls into 1st, 2nd or 99th percentile and how little falls into a single percentile in the middle of the distribution. It's actually fairly intuitive why this happens. The same number of people have to fall into each percentile and if there are few people at the tails of the distribution then we need to widen the range of the percentiles there to get enough people. The opposite is true for the peak of the distribution. There are a lot of people there so slim sliver of the distribution is enough to get quite a few people into the percentile. The fact that someone falls into low/high percentile does not mean\
The 100th percentile is so far away because the `quantile` function records the higher boundary of the percentile rather than the middle so it has to end at the very far end of the distribution.

This also means that if some value increases over time from a very low percentile with a steady pace then we might expect first slow increases in percentiles, then rapid increases around the middle of the distribution and again slower increases as we are reaching the top. Lets try simulating that:

```{r}
#' generate initial small x
#' run a for loop in which we:
#' - increase the value of x
#' - record its percentile now and save it
#' - store percentile for each step
#' 

x_init <- min(x) #start with the lowest value in our distribution
perc_progress <- c() #create a vector to store percentiles
for(i in 1:1000) { # max of 1000 steps
  x_init <- x_init + .1 #increase our value by .1
  perc_value <- min(x_percentiles[which(x_percentiles > x_init)]) # get the percentile value
  percentile <- names(x_percentiles[which(x_percentiles == perc_value)]) # get the percentile name
  perc_progress <- c(perc_progress, percentile) # we want to stop if we get too close to max value and there are still iterations left (otherwise the min() function breaks)
  if (x_init >=(max(x) - .1)) {
    break
  }
}

perc_progress<- as.numeric(str_extract(perc_progress, "[0-9]+"))

data.frame(perc_progress) %>%
  ggplot(aes(x = 1:length(perc_progress), y = perc_progress)) +
  geom_line(color = col_main[12], linewidth = 2) +
  labs(x = "iteration", y = "percentile") +
  my_theme()
```

Exactly what we would expect! First the change in percentiles is slow, then it speeds up and slows down in the right half of the plot. It takes us a long time to get out of the lowest percentiles but once we do we quickly get to the 50th and start changing more slowly form there on.

### variability in percentiles

One significant consequence of how differences between subsequent percentiles vary is how much variability in percentiles can we expect with the same amount of variability on the original scale depending on where we start.

This is a common thing when infants gain weight. They might be gaining weight by some amount plus some random variations (lots of reasons here - some things in the diet, baby pooped/peed before being weighed etc.). In low or high percentiles we might expect this random variation in how much they gain weight to matter little. However in the middle it will make the variation in percentiles seem bigger. Again lets simulate some random variation around our distribution of x with 3 starting places: low (5th), middle (50th) and high percentile (95th).

```{r}

simulate_variability <- function(init_perc, sd_change) {
  x_init <- x_percentiles[init_perc] #start with the lowest value in our distribution
perc_progress <- c() #create a vector to store percentiles
for(i in 1:1000) { # max of 1000 steps
  x_init <- x_init + rnorm(1, mean = 0, sd = sd_change) #increase our value by .1
  perc_value <- min(x_percentiles[which(x_percentiles > x_init)]) # get the percentile value
  percentile <- names(x_percentiles[which(x_percentiles == perc_value)]) # get the percentile name
  perc_progress <- c(perc_progress, percentile) # we want to stop if we get too close to max value and there are still iterations left (otherwise the min() function breaks)
  if (x_init >=(max(x) - .1) | x_init <= (min(x) + .1)) {
    break
  }
}
  perc_progress<- as.numeric(str_extract(perc_progress, "[0-9]+"))
  return(perc_progress)
}


prog_low <- simulate_variability(5, .02)
prog_mid <- simulate_variability(50, .02)
prog_high <- simulate_variability(95, .02)

prog_df <- data.frame(prog_low, prog_mid, prog_high) %>%
  pivot_longer(cols = everything(), values_to = "percentile", names_to = "condition") %>%
  mutate(condition = factor(condition, ordered = T, levels = c("prog_low", "prog_mid", "prog_high")))


prog_df %>%
  ggplot(aes(x = 1:length(percentile)/3, y = percentile)) +
  geom_line(color = col_main[12]) +
  facet_wrap(~condition) +
  labs(x = "iteration", y = "percentile") +
  my_theme()
```

You can see a lot more variability in the middle panel than in the left or right ones even though the changes on the original scale come from the same distribution.

In the above simulation we were in fact not creating any growth, just random variation from the original value (in order to simulate that we would need percentiles for each iteration) but assuming no strange growths that would not change the results a lot (rather than drawing a number from a distribution with mean 0 we would make the mean higher than 0 and still our expectation would be that a person in 50th percentile in time 1 should be on average in 50th percentile in time 2).

This means that when looking at percentiles e.g. weight gains of babies in low or high percentiles might seem much more stable than of those from the mid percentiles even if in fact they are very similar weight gains.

**make a simulation of actual growth? We will stick to one gender to avoid additional complexity**

**What that would need:**

1.  simulate growth at various percentiles
2.  Validate that this is close to actual growth
3.  get percentiles for each stage
4.  simulate kids from percentiles
5.  simulate their growth and get percentiles at each stag

Below is a plot of percentiles for male baby weights from birth to 24 months taken from [CDC](https://www.cdc.gov/growthcharts/html_charts/wtageinf.htm):

```{r}
#' getting some real data from cdc
#' 

baby_w <- read_delim("baby_weight.tsv")
colnames(baby_w) <- trimws(colnames(baby_w))
baby_w <- baby_w %>%
  mutate(across(.cols = '3rd':'95th', as.numeric),
         `months` = as.numeric(`months`))


baby_w %>%
  pivot_longer(cols = '3rd':'97th', values_to = "weight", names_to = "percentile") %>%
  ggplot(aes(x = months, y = weight, color = percentile, group = percentile)) +
  geom_line(linewidth = 1.5) +
  scale_color_manual(values = col_main) +
  labs(title = "Weight percentiles for babies\n0-24 months old",
       subtitle = "Data from CDC") +
  my_theme()
```

Lets try to simulate that

**How do I simulate the growth? Ideas:**

-   make a simple spline to model the mean and then simulate from the model?

-   Try to find a function that approximates well?

```{r}


#ok, we got a function that approximates this?
#how do we move on to get a growth with some random variability?




```

```{r}
#growth function at 50th
x <- baby_w$months
y <- baby_w$`50th`
fun_50 <- approxfun(x = x, y = y)
x_1 <- fun_50(0)
x_1_results <- c(x_1)
for (i in (1:26)) {
  x_1 <- x_1 + fun_50(i+1) - fun_50(i) + rnorm(1, 0, .52)
  x_1_results <- c(x_1_results, x_1)
}

## ok this seems to work
#now we just need better percentile tables
```

getting the tables:

```{r}


get_mean_sd <- function(perc_50, perc_75) {
  m <- perc_50
  sd <- (perc_75 - perc_50) / 0.6744898
  result <- c(m, sd)
  return(result)
}

get_percentiles <- function(time) {
  perc_50 <- as.vector(baby_w[time,6])
  perc_75 <- as.vector(baby_w[time,7])
  msd_01 <- as.vector(get_mean_sd(perc_50[[1]], perc_75[[1]]))


s <- rnorm(1e4, msd_01[1], msd_01[2])

percentiles <- quantile(s, seq(.01,1, .01))
return(percentiles)
}

percentiles_df <- data.frame(a = 1:100)

for(i in 1:26) {
  p <- get_percentiles(i)
  name <- glue::glue("p_{i}")
  percentiles_df[,i] <- p
}

```

```{r}
#simulating the growth
x_50_init <-
for(i in 1:26) {
  
}

perc_value <- min(x_percentiles[which(x_percentiles > x_init)]) # get the percentile value
  percentile <- names(x_percentiles[which(x_percentiles == perc_value)]) # get the percentile name
```

## Correlations with percentiles

The last thing worth looking at when working with percentile scales are some unintuitive things about correlations on percentile scales.

```{r}
y <- rnorm(N, .6*x)

y_perc <- ntile(y, 100)

d <- data.frame(x, y, x_perc, y_perc)
```

Lets start by looking at a simple scatterplot:

```{r}
d |>
  ggplot(aes(x = x, y = y)) +
  geom_point(alpha = .3) +
  labs(title = paste0("correlation = ",as.character(round(cor(x, y), 2)))) +
  my_theme()
```

Now lets look at the percentiles:

```{r}
d |>
  ggplot(aes(x = x_perc, y = y_perc)) +
  geom_point(alpha = .3) +
  labs(title = paste0("correlation = ",as.character(round(cor(x_perc, y_perc), 2)))) +
  my_theme()
```

looks a loot more noisy right? But the correlation is pretty much the same. This can be pretty confusing and is actually sometimes done in those "guess the correlation from the scatterplot" games.

**Do I want to add some transformations and how they affect correlations?**

lets try some additional weirder stuff

```{r}
x_moved <- x + .5
x_m_perc <- ntile(x_moved, 100)

plot(x_moved, y)
```

```{r}
x_scaled <- x^2
x_s_perc <- ntile(x_scaled, 100)

cor(x_s_perc, y_perc)
cor(x_scaled, y)
```
